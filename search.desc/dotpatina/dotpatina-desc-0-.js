searchState.loadedDescShard("dotpatina", 0, "The Patina CLI is a simple command line application …\nThe cli module defines the clap CLI interface for …\nThe diff module provides diffing behavior for files. This …\nThe engine module contains the core logic for dotpatina …\nMain entry point for the application. This launches the …\nCore Patina data structure and functions.\nStructures and functions for processing Patina templates. …\nMiscellaneous utilities used throughout the crate\nRender and apply a patina\nA struct for defining PatinaInterface behavior for the CLI.\nThe available commands for the CLI\nOptions that apply globally to the CLI\nPatinaCli renders files from templates and sets of …\nOptions that apply to patina subcommands\nRender a patina to stdout\nThe specified command to run\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal options apply to all subcommands\nIncluded global options\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether input is enabled. When <code>false</code>, the CLI will not …\nDisable colors\nParse and return command line arguments\nThe file path to the patina toml file\nRun the CLI\nThe list of tags to filter on\nA list of variables files\nThe verbosity level of the CLI\nDon’t ask for user input\nDon’t keep a copy of previous files in the trash folder\nCommand line options\nCommand line options\nDiffAnalysis provides functionality for diffs within …\nDetails for a line output for a diff\nDetermine if there are any changes in the diff\nThe string representation of the change\nThe change tag for the line\nThe color to use for the line\nThe number of lines since the DiffLine that was a change\nA character indicating the type of change\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe line number in the new file\nThe line number in the old file\nGet a String representation of the diff for display\nThe PatinaEngine is the main driver of logic for dotpatina …\nApplies all the Patina files\nReturns the argument unchanged.\nThis module contains definitions for interfacing with …\nCalls <code>U::from(self)</code>.\nCreate a new PatinaEngine\nThe path to the patina file on disk\nA reference to the PatinaInterface that defines how to …\nRenders a Patina\nThe set of tags to filter on\nA list of variables path files\nSpecifies operations for interfacing with …\nPrompts the user for confirmation to apply the patina\nGet whether or not input is enabled\nOutput a single string\nOutput a patina render\nSet whether or not input is enabled\nA Patina describes a set of variables and templates that …\nThe path to this patina\nA short description of the Patina\nA list of files referencing templates and their target …\nGet an iterator for all PatinaFiles that are tagged with …\nReturns the argument unchanged.\nLoad a Patina from a TOML file\nGet a path within the context of this Patina\nCalls <code>U::from(self)</code>.\nLoad vars files from disk and overlay them onto the …\nThe name of the Patina\nOverlay the contents of vars_file onto the current vars\nPatinaFile and related functionality\nPatina utilities for managing variables.\nA map of variables that can be used in the templates\nA PatinaFile describes a template file and its target …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn optional list of tags for this patina file. This allows …\nThe path to the garget output file\nThe path to the template file\nOverlay the contents of source onto target as json maps …\nPatinaFileRender is an object that holds a reference to a …\nWhether or not the file has changes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA reference to the PatinaFile\nRenders all the PatinaFiles in a Patina.\nRender a single PatinaFile to a string.\nThe full render string for this file\nContains the error value\nAn enum representing all possible errors that can occur in …\nAn error that occurs when a file cannot be read\nAn error that occurs when a file cannot be written\nFailed to get input from the user\nA vars object is invalid\nA general error with a message\nFailed to trash a file\nContains the success value\nAn error that occurs when rendering a handlebars template\nA Result type that uses the <code>Error</code> enum\nAn error that occurs when parsing Toml data\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>Error::FileRead</code>, …\nReturns the inner fields if this is a <code>Error::FileWrite</code>, …\nReturns the inner fields if this is a <code>Error::GetUserInput</code>, …\nReturns the inner fields if this is a <code>Error::InvalidVars</code>, …\nReturns the inner fields if this is a <code>Error::Message</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>Error::RenderTemplate</code>…\nReturns the inner fields if this is a <code>Error::TomlParse</code>, …\nReturns true if this is a <code>Error::FileRead</code>, otherwise false\nReturns true if this is a <code>Error::FileWrite</code>, otherwise false\nReturns true if this is a <code>Error::GetUserInput</code>, otherwise …\nReturns true if this is a <code>Error::InvalidVars</code>, otherwise …\nReturns true if this is a <code>Error::Message</code>, otherwise false\nReturns true if this is a <code>Error::MoveFileToTrash</code>, …\nReturns true if this is a <code>Error::RenderTemplate</code>, otherwise …\nReturns true if this is a <code>Error::TomlParse</code>, otherwise false\nGiven a path, normalize it to an absolute path with cwd (<code>.</code>…")